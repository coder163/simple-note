<template>
  <textarea id="editor"></textarea>
</template>
<script lang="ts" setup>
import { onMounted, watch, ref } from "vue";
import { useStore } from "vuex";
import "codemirror/lib/codemirror.css";
import "codemirror/theme/eclipse.css";
import "codemirror/theme/darcula.css";

//@ts-ignore
import CodeMirror from "codemirror";
import "codemirror/mode/gfm/gfm";
import "codemirror/mode/markdown/markdown";
import "codemirror/mode/clike/clike.js";
import "codemirror/addon/edit/continuelist.js";
import "codemirror/addon/selection/active-line.js";

require("codemirror/mode/clike/clike.js");
require("codemirror/mode/markdown/markdown.js");
require("codemirror/addon/edit/continuelist.js");
require("codemirror/addon/selection/active-line.js");
//滚动条
require("codemirror/addon/scroll/simplescrollbars.js");
require("codemirror/addon/scroll/simplescrollbars.css");

const CompleteEmoji = require("hypermd/goods/complete-emoji");
require("codemirror/mode/haskell/haskell");

// 折叠
require("codemirror/addon/fold/foldgutter.css");
require("codemirror/addon/fold/foldcode");
require("codemirror/addon/fold/foldgutter");
require("codemirror/addon/fold/brace-fold");
require("codemirror/addon/fold/comment-fold");
//搜索功能
require("codemirror/addon/scroll/annotatescrollbar.js");
require("codemirror/addon/search/matchesonscrollbar.js");
require("codemirror/addon/search/match-highlighter.js");
require("codemirror/addon/search/jump-to-line.js");

require("codemirror/addon/dialog/dialog.js");
require("codemirror/addon/dialog/dialog.css");
require("codemirror/addon/search/searchcursor.js");
require("codemirror/addon/search/search.js");
//代码提示
require("codemirror/addon/hint/show-hint");
// 自动括号匹配功能
require("codemirror/addon/edit/matchbrackets");

// 显示自动刷新
require("codemirror/addon/display/autorefresh");

// 多语言支持？
require("codemirror/addon/mode/overlay");
require("codemirror/addon/mode/multiplex");

const { ipcRenderer } = window.require("electron");

let cm: any = null;

const store = useStore();
let fileFullPath = ref<string>();
let option = {
  lineWrapping: true, //代码折叠
  foldGutter: true,
  gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter", "CodeMirror-lint-markers"],
  viewportMargin: Infinity,
  lineNumbers: true,
  tabSize: 4,
  mode: "gfm",
  theme: "eclipse",
  matchBrackets: true, //括号匹配
  autoCloseBrackets: true, // 在键入时自动关闭括号和引号
  styleActiveLine: true, // 选中行高亮
  highlightFormatting: true, //md配置
  allowAtxHeaderWithoutSpace: true,
  // 代码提示功能
  hintOptions: {
    // 避免由于提示列表只有一个提示信息时，自动填充
    completeSingle: false,
    // 不同的语言支持从配置中读取自定义配置 sql语言允许配置表和字段信息，用于代码提示 CompleteEmoji.createHintFunc()
    // hint: handleShowHint,
  },

  hmdReadLink: {
    baseURI: "D:\\笔记整理\\Java研修录\\基础编程",
  },

  //滚动条""
  // scrollbarStyle:'native'
};
ipcRenderer.on("read-file-reply", (event: any, path: string, data: any) => {
  cm.setValue(data);
  document.title = path;
  fileFullPath.value = path;
  cm?.eachLine((lines: any) => {

    let imgRegex = /^!\[(.*)\]\((.*)\)/
    const result = lines.text.match(imgRegex)
    if (result) {

      const posLine = cm.lineInfo(lines).line   // 链接的行号
      const posStart = lines.text.indexOf(result)   // 链接的起始字符位置
      const posEnd = posStart + result.length      // 结束字符位置

      // let img= `<img src='D:\\笔记整理\\Java研修录\\Linux基础\\${result[2]}' style="zoom:60%;"/>`
      // cm.replaceRange(img,{line:posLine+1,ch:posStart})
 
    }

  })

 

});

ipcRenderer.on("set-lineNumber", (event, lineNumber) => {
  setTimeout(() => {
    cm.focus();
    cm.setCursor({
      line: lineNumber,
      ch: 0,
    });
  }, 20);
});
onMounted(() => {
  cm = CodeMirror.fromTextArea(document.getElementById("editor"), option);
  cm.on("change", function () {
    document.title = fileFullPath.value + "*";

  });
 cm.on('renderLine', (cm_: any, line: any, element: any) => {
    console.log("渲染，line",line)
    let imgRegex = /^!\[(.*)\]\((.*)\)/
    let imgTagRegex = /<img src="([^"]*?)"/;

    const result = line.text.match(imgRegex)
    const resultTag = line.text.match(imgTagRegex)

    if (resultTag) {

      element.innerHTML = `<img src='D:\\笔记整理\\Java研修录\\Linux基础\\${resultTag[1]}' 
          style="zoom:60%;"/>`
    }
    if (result) {

      element.innerHTML = `<img  src='D:\\笔记整理\\Java研修录\\Linux基础\\${result[2]}' 
          style="zoom:60%;"/>`
    }


  })
  cm.on('mousedown', (cm_: any, event: any) => {

    // 1 = 鼠标左键，2 = 鼠标右键，4 = 鼠标中键

    if (event.buttons === 2) {
      const client = {
        //@ts-ignore
        x: event.clientX,
        //@ts-ignore
        y: event.clientY,
      };
      ipcRenderer.send("menu", client);
    }
    // if (event.buttons === 1 || event.buttons === 4) {
    //   const element = event.target as Element
    //   if (element.classList.contains('cm-clickable-link')) {
    //     // 打开链接 ...
    //   }
    // }
  })
  cm.addKeyMap({
    "Ctrl-S": function () {
      document.title = fileFullPath.value as string;
      let fs = window.require("fs");

      fs.writeFile(fileFullPath.value, cm.getValue(), (err: any) => {
        if (err) {
          console.log(err);
        }
      });
    },
    "Ctrl-P": function () {
      cm?.execCommand("find");
    },
    "Alt-/": function () {
      cm?.execCommand("find");
    },
  });

  cm.on("inputRead", () => {
    console.log("inputRead");
    cm.showHint();
  });

});

function handleShowHint(cmInstance: any, hintOptions: any) {
  let cursor = cmInstance.getCursor();
  let cursorLine = cmInstance.getLine(cursor.line);
  let end = cursor.ch;
  let start = end;

  let token = cmInstance.getTokenAt(cursor);
  // console.log(cmInstance, cursor, cursorLine, end, token);
  //    to: { ch: token.end, line: cursor.line },
  return {
    list: [
      {
        text: "hello",
        displayText: "你好呀",
        displayInfo: "提示信息1",
        render: hintRender,
      },
      {
        text: "world",
        displayText: "世界",
        displayInfo: "提示信息2",
        render: hintRender,
      },
    ],
    from: { ch: token.start, line: cursor.line },
    to: { ch: token.end, line: cursor.line },
  };
}
function hintRender(element: any, self: any, data: any) {
  console.log(element);
  let div = document.createElement("div");
  div.setAttribute("class", "autocomplete-div");

  let divText = document.createElement("div");
  divText.setAttribute("class", "autocomplete-name");
  divText.innerText = data.displayText;

  let divInfo = document.createElement("div");
  divInfo.setAttribute("class", "autocomplete-hint");
  divInfo.innerText = data.displayInfo;

  div.appendChild(divText);
  div.appendChild(divInfo);
  element.appendChild(div);
}
</script>

<style lang="scss">
.CodeMirror {
  font-family: "Fira Code", Consolas, Menlo, Monaco, "Lucida Console",
    "Liberation Mono", "DejaVu Sans Mono", "Bitstream Vera Sans Mono",
    "Courier New", monospace, serif !important;
  height: 100% !important;
}

.editor-tool {
  line-height: 30px;
  widows: 100%;
  background-color: #0f0;
}
</style>
